generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String              @id @default(uuid())
  name             String
  email            String              @unique
  clerkId          String              @unique
  username         String              @unique
  followers        String[]            @default([])
  following        String[]            @default([])
  votes            Int                 @default(0)
  about            String?
  image            String?
  expoTokens       String[]            @default([])
  blocked_intrests InterestEnum[]      @default([])
  reputationScore  Float               @default(0)
  lastActive       DateTime?
  createdAt        DateTime            @default(now())
  categories       Category[]
  debates_joined   DebateParticipant[]
  created_debates  Debate_room[]       @relation("DebateCreator")
  notifications    Notification[]
  badges           UserBadge[]
  sentMessages     Message[]           @relation("MessageSender")
  receivedMessages Message[]           @relation("MessageReceiver")
  conversations    UserConversation[]
}

model Conversation {
  id            String             @id @default(uuid())
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  lastMessageAt DateTime           @default(now())
  messages      Message[]
  participants  UserConversation[]
}

model UserConversation {
  userId         String
  conversationId String
  hasUnread      Boolean      @default(false)
  joinedAt       DateTime     @default(now())
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@id([userId, conversationId])
}

model Message {
  id             String       @id @default(uuid())
  content        String
  senderId       String
  receiverId     String
  conversationId String
  createdAt      DateTime     @default(now())
  sender         User         @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver       User         @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String           @id @default(uuid())
  userId    String
  type      NotificationType
  content   String
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserBadge {
  id        String    @id @default(uuid())
  userId    String
  badgeType BadgeType
  earnedAt  DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id        String       @id @default(uuid())
  name      CategoryEnum
  weight    Int          @default(0)
  userId    String
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  interests Interest[]
}

model Interest {
  id         String       @id @default(uuid())
  name       InterestEnum
  weight     Int          @default(0)
  keywords   String?
  categoryId String
  category   Category     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model Debate_room {
  id             String                 @id @default(uuid())
  title          String
  description    String
  createdAt      DateTime               @default(now())
  image          String
  duration       Int
  active         Boolean                @default(true)
  creator_id     String
  keywords       String[]
  upvotes        Int                    @default(0)
  shares         Int                    @default(0)
  deletedAt      DateTime?
  creator        User                   @relation("DebateCreator", fields: [creator_id], references: [id])
  participants   DebateParticipant[]
  categories     Debate_room_Category[]
}

model Debate_room_Category {
  id            String                  @id @default(uuid())
  debate_roomId String
  category      CategoryEnum
  debate_room   Debate_room             @relation(fields: [debate_roomId], references: [id], onDelete: Cascade)
  sub_categories Debate_room_SubCategory[]

  @@unique([debate_roomId, category])
}

model Debate_room_SubCategory {
  id                     String               @id @default(uuid())
  debate_room_categoryId String
  subCategory            InterestEnum
  category               Debate_room_Category @relation(fields: [debate_room_categoryId], references: [id], onDelete: Cascade)

  @@unique([debate_room_categoryId, subCategory])
}

model DebateParticipant {
  debateRoomId  String
  userId        String
  opinion       String?
  agreed        Boolean?
  createdAt     DateTime    @default(now())
  upvotes       Int         @default(0)
  aiScore       Int         @default(0)
  aiFlagged     Boolean     @default(false)
  is_aiFeedback Boolean     @default(false)
  debateRoom    Debate_room @relation(fields: [debateRoomId], references: [id])
  user          User        @relation(fields: [userId], references: [id])

  @@id([debateRoomId, userId])
  @@index([debateRoomId,aiScore])
  @@index([debateRoomId,createdAt])
  @@index([debateRoomId,upvotes])
}

enum CategoryEnum {
  POLITICS_AND_GOVERNANCE
  ECONOMY_AND_DEVELOPMENT
  LAW_AND_JUSTICE
  EDUCATION
  ENVIRONMENT_AND_SUSTAINABILITY
  SOCIAL_ISSUES
  SCIENCE_AND_TECHNOLOGY
  ENTERTAINMENT_AND_MEDIA
  SPORTS_AND_LEISURE
}

enum InterestEnum {
  ELECTIONS
  GOVERNMENT_POLICY
  INTERNATIONAL_RELATIONS
  POLITICAL_STRATEGIES
  ECONOMY
  BUSINESS_TRENDS
  GLOBAL_TRADE
  INNOVATION_IN_BUSINESS
  LEGAL_SYSTEM
  CRIMINAL_JUSTICE
  CIVIL_RIGHTS
  COURT_DECISIONS
  EDUCATIONAL_POLICY
  LEARNING_TECHNIQUES
  SCHOOL_REFORMS
  CLIMATE_CHANGE
  ENVIRONMENTAL_POLICY
  SUSTAINABLE_LIVING
  RENEWABLE_ENERGY
  SOCIAL_EQUALITY
  COMMUNITY_DEVELOPMENT
  CULTURAL_DIVERSITY
  HUMAN_RIGHTS
  WEB_DEVELOPMENT
  SOFTWARE_ENGINEERING
  AI
  TECH_INNOVATION
  CYBERSECURITY
  ROBOTICS
  DATA_SCIENCE
  MOBILE_TECHNOLOGY
  FILM_AND_TV
  MUSIC
  JOURNALISM
  DIGITAL_MEDIA
  LITERATURE_AND_THEATRE
  CRICKET
  IPL
  WWE
  SPORTS_GENERAL
  FITNESS
  FOOTBALL
  BASKETBALL
  TENNIS
  FORMULA_ONE
}

enum NotificationType {
  DEBATE_INVITE
  DEBATE_COMMENT
  UPVOTE
  MENTION
  SYSTEM_UPDATE
  NEW_MESSAGE
}

enum BadgeType {
  DEBATE_STARTER
  FREQUENT_PARTICIPANT
  TOP_CONTRIBUTOR
  CONSENSUS_BUILDER
}
